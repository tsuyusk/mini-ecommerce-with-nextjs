{"version":3,"file":"static/webpack/static/development/pages/[skuId].js.feaebad57ce706859fd5.hot-update.js","sources":["webpack:///./components/checkoutButton.tsx","webpack:///./config/stripe.ts","webpack:///./node_modules/@stripe/stripe-js/dist/stripe.esm.js","webpack:///./pages/[skuId].tsx"],"sourcesContent":["import React from \"react\";\nimport { loadStripe } from \"@stripe/stripe-js\";\n\nimport stripeConfig from \"../config/stripe\";\nimport Stripe from \"stripe\";\n\nconst stripePromise = loadStripe(stripeConfig.publicKey);\n\ninterface Props {\n  skuId: string;\n  itemName: string;\n}\n\nconst CheckoutButton: React.FC<Props> = ({ skuId, itemName,  }) => {\n  const handleClick = async (event) => {\n    const stripe = await stripePromise;\n    const { error } = await stripe.redirectToCheckout({\n      items: [\n        {sku: skuId, quantity: 1}\n      ],\n      successUrl: `https://3000-b0fafa9a-14ad-4a54-9b24-7a703d59eb11.ws-us02.gitpod.io/sucess?itemName=${itemName}`,\n      cancelUrl: `https://3000-b0fafa9a-14ad-4a54-9b24-7a703d59eb11.ws-us02.gitpod.io/cancel`,\n    })\n    if(error) console.log(error);\n  }\n  return (\n    <button onClick={handleClick}>\n      Buy\n    </button>\n  )\n}\n\nexport default CheckoutButton;","export default {\n  publicKey: \"pk_test_wXtC8ic2VmQpvXeP6VCmXBuu002qjbQLiB\",\n  secretKey: \"sk_test_5OPus3iUTDdLGjuIiNjFUaeJ00SLuhcaI7\"\n}","function _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n    return arr2;\n  }\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nvar V3_URL = 'https://js.stripe.com/v3';\nvar V3_URL_REGEX = /^https:\\/\\/js\\.stripe\\.com\\/v3\\/?(\\?.*)?$/;\nvar EXISTING_SCRIPT_MESSAGE = 'loadStripe.setLoadParameters was called but an existing Stripe.js script already exists in the document; existing script parameters will be used';\nvar findScript = function findScript() {\n  var scripts = document.querySelectorAll(\"script[src^=\\\"\".concat(V3_URL, \"\\\"]\"));\n\n  for (var i = 0; i < scripts.length; i++) {\n    var script = scripts[i];\n\n    if (!V3_URL_REGEX.test(script.src)) {\n      continue;\n    }\n\n    return script;\n  }\n\n  return null;\n};\n\nvar injectScript = function injectScript(params) {\n  var queryString = params && !params.advancedFraudSignals ? '?advancedFraudSignals=false' : '';\n  var script = document.createElement('script');\n  script.src = \"\".concat(V3_URL).concat(queryString);\n  var headOrBody = document.head || document.body;\n\n  if (!headOrBody) {\n    throw new Error('Expected document.body not to be null. Stripe.js requires a <body> element.');\n  }\n\n  headOrBody.appendChild(script);\n  return script;\n};\n\nvar registerWrapper = function registerWrapper(stripe) {\n  if (!stripe || !stripe._registerWrapper) {\n    return;\n  }\n\n  stripe._registerWrapper({\n    name: 'stripe-js',\n    version: \"1.5.0\"\n  });\n};\n\nvar stripePromise = null;\nvar loadScript = function loadScript(params) {\n  // Ensure that we only attempt to load Stripe.js at most once\n  if (stripePromise !== null) {\n    return stripePromise;\n  }\n\n  stripePromise = new Promise(function (resolve, reject) {\n    if (typeof window === 'undefined') {\n      // Resolve to null when imported server side. This makes the module\n      // safe to import in an isomorphic code base.\n      resolve(null);\n      return;\n    }\n\n    if (window.Stripe && params) {\n      console.warn(EXISTING_SCRIPT_MESSAGE);\n    }\n\n    if (window.Stripe) {\n      resolve(window.Stripe);\n      return;\n    }\n\n    try {\n      var script = findScript();\n\n      if (script && params) {\n        console.warn(EXISTING_SCRIPT_MESSAGE);\n      } else if (!script) {\n        script = injectScript(params);\n      }\n\n      script.addEventListener('load', function () {\n        if (window.Stripe) {\n          resolve(window.Stripe);\n        } else {\n          reject(new Error('Stripe.js not available'));\n        }\n      });\n      script.addEventListener('error', function () {\n        reject(new Error('Failed to load Stripe.js'));\n      });\n    } catch (error) {\n      reject(error);\n      return;\n    }\n  });\n  return stripePromise;\n};\nvar initStripe = function initStripe(maybeStripe, args) {\n  if (maybeStripe === null) {\n    return null;\n  }\n\n  var stripe = maybeStripe.apply(void 0, _toConsumableArray(args));\n  registerWrapper(stripe);\n  return stripe;\n};\n\n// own script injection.\n\nvar stripePromise$1 = Promise.resolve().then(function () {\n  return loadScript(null);\n});\nvar loadCalled = false;\nstripePromise$1[\"catch\"](function (err) {\n  if (!loadCalled) {\n    console.warn(err);\n  }\n});\nvar loadStripe = function loadStripe() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  loadCalled = true;\n  return stripePromise$1.then(function (maybeStripe) {\n    return initStripe(maybeStripe, args);\n  });\n};\n\nexport { loadStripe };\n","import React from \"react\";\nimport Stripe from \"stripe\";\nimport { GetStaticPaths, GetStaticProps } from \"next\";\nimport Link from \"next/link\";\n\nimport CheckoutButton from \"../components/checkoutButton\";\nimport stripeConfig from \"../config/stripe\";\n\ninterface Props {\n  sku: Stripe.Sku;\n}\n\nexport const getStaticPaths: GetStaticPaths = async () => {\n  const stripe = new Stripe(stripeConfig.secretKey, {\n    apiVersion: '2020-03-02'\n  });\n\n  const skus = await stripe.skus.list();\n\n  const paths = skus.data.map(sku => ({\n    params: {\n      skuId: sku.id,\n    }\n  }))\n\n  return {\n    paths,\n    fallback: false\n  }\n}\n\nexport const getStaticProps: GetStaticProps = async ({params}) => {\n  const stripe = new Stripe(stripeConfig.secretKey, {\n  apiVersion: '2020-03-02'\n  });\n\n  const { skuId } = params;\n\n  const sku = await stripe.skus.retrieve(skuId as string);\n\n  return {\n    props: {\n      sku,\n    }\n  }\n}\n\nconst Product: React.FC<Props> = ({ sku }) => {\n  return (\n    <div>\n      <h1>{sku.attributes.name}</h1>\n\n      {sku.image && <img src={sku.image} style={{width: 100}}/>}\n\n      <h2>{(sku.price / 100).toLocaleString(\"pt-BR\", {\n        style: \"currency\",\n        currency: sku.currency.toUpperCase()\n      })}</h2>\n      <CheckoutButton itemName={sku.attributes.name} />\n      <Link href=\"/\">Go back</Link>\n    </div>\n  )\n}\n\nexport default Product;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AAGA;AACA;AAMA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAGA;AACA;AAAA;AAAA;AAEA;AACA;AALA;AACA;AAHA;AAAA;AAEA;AAOA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAUA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;;;;;;;;;;;;AChCA;AAAA;AACA;AACA;AAFA;;;;;;;;;;;;ACAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AC/IA;AAEA;AACA;AAyCA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;;AACA;;;;A","sourceRoot":""}